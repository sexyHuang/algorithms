const dfs = ({ grid, i, j }) => {
  const grid_column = grid[0].length;
  const grid_row = grid.length;
  if (j >= grid_column || i >= grid_row || i < 0 || j < 0 || grid[i][j] === '0')
    return false;
  grid[i][j] = '0';

  dfs({
    grid,
    i: i + 1,
    j,
  });
  dfs({
    grid,
    i,
    j: j - 1,
  });
  dfs({
    grid,
    i: i - 1,
    j,
  });
  dfs({
    grid,
    i,
    j: j + 1,
  });
};

/**
 * @param {character[][]} grid
 * @return {number}
 */
const numIslands = (grid) => {
  let result = 0;

  grid.forEach((row, i) => {
    row.forEach((item, j) => {
      if (item === '1') {
        dfs({ grid, i, j });
        result++;
      }
    });
  });
  return result;
};
const input = [
  [
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
  ],
  [
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '1',
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
  ],
  [
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
  ],
  [
    '1',
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '1',
    '0',
    '1',
    '1',
    '0',
  ],
  [
    '0',
    '1',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
  ],
  [
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
  ],
  [
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
  ],
  [
    '1',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '0',
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
  ],
  [
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
  ],
  [
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
  ],
  [
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
  ],
  [
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
  ],
  [
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '1',
  ],
  [
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '1',
    '0',
    '0',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '0',
    '0',
  ],
  [
    '0',
    '0',
    '1',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '1',
    '1',
    '0',
    '1',
    '0',
    '1',
    '0',
    '0',
    '0',
    '1',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '0',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '1',
    '0',
    '1',
    '0',
    '1',
    '1',
    '0',
    '0',
    '0',
  ],
];

console.log(numIslands(input));
